// This is the MAIN configuration file, must exist and contain all the fields corresponding with the version of the artifact where it came from.

@SECTION	JazzHEAD										// This section is mandatory and must be the first section in the file.
////////////////////

JAZZ_CONFIG_VERSION						= 1.0				// The only version. This is mandatory and must be the first field in the whole file.


@SECTION	JazzCLUSTER
///////////////////////

JAZZ_NODES								= 1					// Number of nodes in the cluster

SSH_NODES_PASSWORD						= 0					// 0 = use configuration variable SSH_CLUSTER_OWNER_PASS, 1 = use passwordless ssh.
SSH_CLUSTER_OWNER_USER					= jazz				// User name with ssh access to all nodes
SSH_CLUSTER_OWNER_PASS					= none				// Password for all nodes if SSH_NODES_PASSWORD == 0

SSH_NODE_ALIAS_0						= Jazz1				// "Nice" names used inside Jazz to refer to nodes. Variables en with _n, n in range
															// 0..JAZZ_NODES-1
															// ...

SSH_NODE_HOST_OR_IP_0					= 20.1.71.31		// IPs or host names, whatever works for an ssh and an http connection from all nodes in
															// the cluster and the clients.
															// ...

JAZZ_NODE_MIN_ROLE_0					= 47				// Minimum (binary) roles: One machine must be the foreman. Nodes will be disabled if
															// they cannot be ALL their minimum roles.
															// PERSISTENCE 0x01, FUNCTION_WORKER 0x02, HAS_RLANGUAGE 0x04, HAS_RAMQ 0x08,
															// PERIMETRAL 0x10, FOREMAN 0x20
															// ...

JAZZ_NODE_MAX_ROLE_0					= 63				// Maximum (binary) roles: Each bit must be >= SSH_NODE_MIN_ROLE_*
															// PERSISTENCE 0x01, FUNCTION_WORKER 0x02, HAS_RLANGUAGE 0x04, HAS_RAMQ 0x08,
															// PERIMETRAL 0x10, FOREMAN 0x20
															// ...

JAZZ_NODE_PORT_0						= 8888				// Jazz server ports for all nodes in the cluster.
															// ...

JAZZ_NODE_WHO_AM_I						= Jazz1				// The identity of the current node. Must match the corresponding SSH_NODE_ALIAS_x of
															// the machine.

@SECTION	JazzHTTPSERVER
//////////////////////////

// Security:

MHD_PERIMETRAL_MODE						= 0					// Possible modes are: 0 == MODE_SAFE_IF_PHYSICAL. There is either no perimetral security
															// or the nodes are "physically" (typically via a firewall) separated from the clients.
															// 1 == MODE_TRUSTED_ONLY the nodes are only accessible to a list of IP ranges
															// (typically, running jzzPERIMETRAL only instances). 2 == MODE_INTERNAL_PERIMETER the
															// node is both a working node and a perimeter checking all the API calls.
															// 3 = MODE_EXTERNAL_PERIMETER the node is only a perimeter node.
															// In any case, writing requires a signed PUT if MHD_ENABLE_ROLE_CREATOR &
															// (MHD_ENABLE_ROLE_DATAWRITER | MHD_ENABLE_ROLE_FUNCTIONWRITER) regardless of the
															// perimetral security level established.

MHD_ENABLE_ROLE_CREATOR					= 0					// Enable PKC for: Create a source, certify datawriters and functionwriters. Owns the
															//				   source it creates and can delete it.
MHD_ENABLE_ROLE_DATAWRITER				= 0					// Enable PKC for: Create/Write/Delete all data instruments in that source.
MHD_ENABLE_ROLE_FUNCTIONWRITER			= 0					// Enable PKC for: Create/Write/Delete all functional instruments in that source.
MHD_ENABLE_ROLE_GROUPADMIN				= 0					// Enable PKC for: Create groups and users with access tokens.
MHD_ENABLE_ROLE_GROUP					= 0					// Enable PKC for: Read data from all the instruments specified in his token.
MHD_ENABLE_ROLE_READER					= 0					// Enable PKC for: Allocate CPU resources for evaluation of functions and autofunctions.

MHD_OVERRIDE_PUBLIC_ROOT_KEY			= 0					// If a public key is given here, it overrides the default ROOT public key. 0 for no key.

MHD_TRUSTED_IP_RANGES					= 1					// The number of variables named MHD_TRUSTED_IP_RANGE_n where n is a zero-based integer.
MHD_TRUSTED_IP_RANGE_0					= 127.0.0.1			// If MHD_PERIMETRAL_MODE == MODE_TRUSTED_ONLY, this IP range (* allowed) is added to the
															// trusted IP list.
// Services enable/disable:

MHD_DISABLE_WEBPAGES					= 0					// Disable web functionality.
MHD_DISABLE_STORAGE						= 0					// Disable storage. Does not disable block functionality since the source "sys" cannot
															// be disabled. Web functionality is independent via MHD_DISABLE_WEBPAGES.

// Some server settings:

MHD_USE_DEBUG							= 0					// Run in debug mode. If this flag is used, the library should print error messages and
															// warnings to stderr.
MHD_USE_SSL								= 0					// Run in HTTPS-mode.
MHD_USE_IPv6							= 0					// Run using the IPv6 protocol (otherwise, MHD will just support IPv4).
MHD_USE_PEDANTIC_CHECKS					= 0					// Be pedantic about the protocol (as opposed to as tolerant as possible). Specifically,
															// at the moment, this flag causes MHD to reject HTTP 1.1 connections without a Host
															// header. This is required by the standard, but of course in violation of the“be as
															// liberal as possible in what you accept” norm. It is recommended to turn this ON if you
															// are testing clients against MHD, and OFF in production.
MHD_SUPPRESS_DATE_NO_CLOCK				= 0					// Suppress (automatically) adding the ’Date:’ header to HTTP responses. This option
															// should ONLY be used on systems that do not have a clock and that DO provide other
															// mechanisms for cache control. See also RFC 2616, section 14.18 (exception 3).
MHD_USE_TCP_FASTOPEN					= 0					// Enable TCP_FASTOPEN on the listen socket. TCP_FASTOPEN is currently supported on
															// Linux >= 3.6. On other systems using this option with cause MHD_start_daemon to fail.
MHD_OPTION_CONNECTION_MEMORY_LIMIT		= 32768				// Maximum memory size per connection (in bytes). The default is 32 kB as defined by the
															// internal constant MHD_POOL_SIZE_DEFAULT. Values above 128k are unlikely to result in
															// much benefit, as half of the memory will be typically used for IO, and TCP buffers are
															// unlikely to support window sizes above 64k on most systems.
MHD_OPTION_CONNECTION_MEMORY_INCREMENT	= 1024				// Increment to use for growing the read buffer (followed by a size_t). The default is
															// 1024 (bytes). Increasing this value will make MHD use memory for reading more
															// aggressively, which can reduce the number of recvfrom calls but may increase the
															// number of sendto calls. The value must fit within MHD_OPTION_CONNECTION_MEMORY_LIMIT.
MHD_OPTION_CONNECTION_LIMIT				= 0					// Leave 0 to keep the default value. Maximum number of concurrent connections to accept.
															// The default is FD_SETSIZE - 4 (the maximum number of file descriptors supported by
															// select minus four for stdin, stdout, stderr and the server socket). In other words,
															// the default is as large as possible.
MHD_OPTION_CONNECTION_TIMEOUT			= 0					// After how many seconds of inactivity should a connection automatically be timed out?
															// (followed by an unsigned int; use zero for no timeout). The default is 0 (no timeout).
MHD_OPTION_PER_IP_CONNECTION_LIMIT		= 0					// Limit on the number of (concurrent) connections made to the server from the same IP
															// address. Can be used to prevent one IP from taking over all the allowed connections.
															// If the same IP tries to establish more than the specified number of connections, they
															// will be immediately rejected. The option should be followed by an unsigned int.
															// The default is 0, which means no limit on the number of connections from the same IP.
MHD_OPTION_THREAD_POOL_SIZE				= 16				// Number of threads in thread pool. Enable thread pooling by setting this value to to
															// something greater than 1. Currently, thread model must be MHD_USE_SELECT_INTERNALLY
															// if thread pooling is enabled.
MHD_OPTION_THREAD_STACK_SIZE			= 0					// Maximum stack size for threads created by MHD. This must be followed by a size_t.
															// Not specifying this option or using a value of zero means using the system default
															// (which is likely to differ based on your platform).
MHD_OPTION_LISTENING_ADDRESS_REUSE		= 0					// This option must be followed by a unsigned int argument. If this option is present and
															// true (nonzero) parameter is given, allow reusing the address:port of the listening
															// socket (using SO_REUSEPORT on most platforms, and SO_REUSEADDR on Windows). If a false
															// (zero) parameter is given, disallow reusing the the address:port of the listening
															// socket (this usually requires no special action, but SO_EXCLUSIVEADDRUSE is needed on
															// Windows). If this option is not present, default behaviour is undefined (currently,
															// SO_REUSEADDR is used on all platforms, which disallows address:port reusing with the
															// exception of Windows).
// REST API analytics:

REST_SAMPLE_PROPORTION					= 0.01				// Proportion of API calls that should be sampled via enter_api_call()/leave_api_call()
															// pairs. This is a double, 1 means analyze all calls, 0 disabled. 0.01 = 1% of calls.

@SECTION	JazzLOGGER
//////////////////////

LOGGER_LINUX_LOCAL						= /tmp/jazz.log		// Name of a file to (immediately) write logs to. Always appended, never erased. To skip
															// this, set to VOID
LOGGER_BLOCK_SIZE						= 1000				// Number of logging events per block. Written after a maximum of LOGGER_BLOCK_TIMEOUT
															// seconds.
LOGGER_BLOCK_KEEPBLOCKS					= 10				// Number of most recent blocks kept by the logger.
LOGGER_BLOCK_TIMEOUT					= 5					// Time in seconds after which the most recent events are written to their persistence
															// block. Also written when buffer is full and when the log reading functions are used.

@SECTION	JazzPERSISTENCE
///////////////////////////

MDB_ENV_SET_MAPSIZE						= 8192				// Size in Mb of the memory buffer used by LMDB. Set the size of the memory map to use
															// for this environment. The size should be a multiple of the OS page size. The default
															// = 10485760 bytes. The size of the memory map is also the maximum size of the database.
															// The value should be chosen as large as possible, to accommodate future growth of the
															// database. This function should be called after mdb_env_create() and before
															// mdb_env_open(). It may be called at later times if no transactions are active in this
															// process. Note that the library does not check for this condition, the caller must
															// ensure it explicitly. The new size takes effect immediately for the current process
															// but will not be persisted to any others until a write transaction has been committed
															// by the current process. Also, only mapsize increases are persisted into the
															// environment. If the mapsize is increased by another process, and data has grown beyond
															// the range of the current mapsize, mdb_txn_begin() will return MDB_MAP_RESIZED. This
															// function may be called with a size of zero to adopt the new size. Any attempt to set a
															// size smaller than the space already consumed by the environment will be silently
															// changed to the current size of the used space.
MDB_PERSISTENCE_PATH					= /home/jadmin/mdb/ // Path to the local persistence (root directory). Each subdirectory in this is a source.
MDB_ENV_SET_MAXREADERS					= 16				// Set the maximum number of threads/reader slots for the environment.
															// Typically == MHD_OPTION_THREAD_POOL_SIZE
MDB_ENV_SET_MAXDBS						= 16				// Set the maximum number of named databases for the environment. This function is only
															// needed if multiple databases will be used in the environment. Simpler applications
															// that use the environment as a single unnamed database can ignore this option. This
															// function may only be called after mdb_env_create() and before mdb_env_open().
															// Currently a moderate number of slots are cheap but a huge number gets expensive:
															// 7-120 words per transaction, and every mdb_dbi_open() does a linear search of the
															// opened slots.
MDB_FIXEDMAP							= 0					// Use a fixed address for the mmap region. This flag must be specified when creating the
															// environment, and is stored persistently in the environment. If successful, the memory
															// map will always reside at the same virtual address and pointers used to reference data
															// items in the database will be constant across multiple invocations. This option may
															// not always work, depending on how the operating system has allocated memory to shared
															// libraries and other uses. The feature is highly experimental.
MDB_WRITEMAP							= 0					// Use a writeable memory map unless MDB_RDONLY is set. This uses fewer mallocs but loses
															// protection from application bugs like wild pointer writes and other bad updates into
															// the database. This may be slightly faster for DBs that fit entirely in RAM, but is
															// slower for DBs larger than RAM. Incompatible with nested transactions. Do not mix
															// processes with and without MDB_WRITEMAP on the same environment. This can defeat
															// durability (mdb_env_sync etc).
MDB_NOMETASYNC							= 1					// Flush system buffers to disk only once per transaction, omit the metadata flush. Defer
															// that until the system flushes files to disk, or next non-MDB_RDONLY commit or
															// mdb_env_sync(). This optimization maintains database integrity, but a system crash may
															// undo the last committed transaction. I.e. it preserves the ACI(atomicity, consistency,
															// isolation) but not D (durability) database property. This flag may be changed at any
															// time using mdb_env_set_flags().
MDB_NOSYNC								= 1					// Don't flush system buffers to disk when committing a transaction. This optimization
															// means a system crash can corrupt the database or lose the last transactions if buffers
															// not yet flushed to disk. The risk is governed by how often the system flushes dirty
															// buffers to disk and how often mdb_env_sync() is called. However, if the filesystem
															// preserves write order and the MDB_WRITEMAP flag is not used, transactions exhibit ACI
															// (atomicity, consistency, isolation) properties and only lose D (durability). I.e.
															// database integrity is maintained, but a system crash may undo the final transactions.
															// Note that (MDB_NOSYNC | MDB_WRITEMAP) leaves the system with no hint for when to write
															// transactions to disk, unless mdb_env_sync() is called. (MDB_MAPASYNC | MDB_WRITEMAP)
															// may be preferable. This flag may be changed at any time using mdb_env_set_flags().
MDB_MAPASYNC							= 1					// When using MDB_WRITEMAP, use asynchronous flushes to disk. As with MDB_NOSYNC, a
															// system crash can then corrupt the database or lose the last transactions. Calling
															// mdb_env_sync() ensures on-disk database integrity until next commit. This flag may be
															// changed at any time using mdb_env_set_flags().
MDB_NOLOCK								= 1					// Don't do any locking. If concurrent access is anticipated, the caller must manage all
															// concurrency itself. For proper operation the caller must enforce single-writer
															// semantics, and must ensure that no readers are using old transactions while a writer
															// is active. The simplest approach is to use an exclusive lock so that no readers may be
															// active at all when a writer begins.
MDB_NORDAHEAD							= 1					// Turn off readahead. Most operating systems perform readahead on read requests by
															// default. This option turns it off if the OS supports it. Turning it off may help
															// random read performance when the DB is larger than RAM and system RAM is full.
MDB_NOMEMINIT							= 1					// Don't initialize malloc'd memory before writing to unused spaces in the data file. By
															// default, memory for pages written to the data file is obtained using malloc. While
															// these pages may be reused in subsequent transactions, freshly malloc'd pages will be
															// initialized to zeroes before use. This avoids persisting leftover data from other code
															// (that used the heap and subsequently freed the memory) into the data file. Note that
															// many other system libraries may allocate and free memory from the heap for arbitrary
															// uses. E.g., stdio may use the heap for file I/O buffers. This initialization step has
															// a modest performance cost so some applications may want to disable it using this flag.
															// This option can be a problem for applications which handle sensitive data like
															// passwords, and it makes memory checkers like Valgrind noisy. This flag is not needed
															// with MDB_WRITEMAP, which writes directly to the mmap instead of using malloc for
															// pages. The initialization is also skipped if MDB_RESERVE is used; the caller is
															// expected to overwrite all of the memory that was reserved in that case. This flag may
															// be changed at any time using mdb_env_set_flags().


@SECTION	EOF												// Mandatory.
